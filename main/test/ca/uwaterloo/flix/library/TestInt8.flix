/*
 * Copyright 2017 Liam Palmer
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
namespace TestInt8 {
    
    /////////////////////////////////////////////////////////////////////////////
    // maxValue                                                                //
    /////////////////////////////////////////////////////////////////////////////
    @test
    def maxValue01(): Bool = Int8.maxValue() == ~~~(1i8 <<< 7)
    
    /////////////////////////////////////////////////////////////////////////////
    // minValue                                                                //
    /////////////////////////////////////////////////////////////////////////////
    @test
    def minValue01(): Bool = Int8.minValue() == (1i8 <<< 7)
    
    /////////////////////////////////////////////////////////////////////////////
    // size                                                                    //
    /////////////////////////////////////////////////////////////////////////////
    @test
    def size01(): Bool = Int8.size() == 8
    
    /////////////////////////////////////////////////////////////////////////////
    // min                                                                     //
    /////////////////////////////////////////////////////////////////////////////
    @test
    def min01(): Bool = Int8.min(1i8, 2i8) == 1i8
    
    @test
    def min02(): Bool = Int8.min(2i8, -1i8) == -1i8
    
    @test
    def min03(): Bool = Int8.min(-33i8, -66i8) == -66i8
    
    /////////////////////////////////////////////////////////////////////////////
    // max                                                                     //
    /////////////////////////////////////////////////////////////////////////////
    @test
    def max01(): Bool = Int8.max(48i8, 49i8) == 49i8
    
    @test
    def max02(): Bool = Int8.max(4i8, -16i8) == 4i8
    
    @test
    def max03(): Bool = Int8.max(-34i8, -16i8) == -16i8
    
    /////////////////////////////////////////////////////////////////////////////
    // abs                                                                     //
    /////////////////////////////////////////////////////////////////////////////
    @test
    def abs01(): Bool = Int8.abs(31i8) == 31i8
    
    @test
    def abs02(): Bool = Int8.abs(-31i8) == 31i8
    
    @test
    def abs03(): Bool = Int8.abs(127i8) == 127i8
    
    @test
    def abs04(): Bool = Int8.abs(-127i8) == 127i8
    
    @test
    def abs05(): Bool = Int8.abs(0i8) == 0i8
    
    @test
    def abs06(): Bool = Int8.abs(-128i8) == -1i8
    
    /////////////////////////////////////////////////////////////////////////////
    // dist                                                                    //
    /////////////////////////////////////////////////////////////////////////////
    @test
    def dist01(): Bool = Int8.dist(31i8, -7i8) == 38i8
    
    @test
    def dist02(): Bool = Int8.dist(-44i8, -1i8) == 43i8
    
    @test
    def dist03(): Bool = Int8.dist(-2i8, -2i8) == 0i8
    
    @test
    def dist04(): Bool = Int8.dist(-128i8, -1i8) == 127i8
    
    @test
    def dist05(): Bool = Int8.dist(-128i8, 0i8) == -1i8
    
    @test
    def dist06(): Bool = Int8.dist(-123i8, 4i8) == 127i8
    
    @test
    def dist07(): Bool = Int8.dist(-123i8, 5i8) == -1i8
    
    /////////////////////////////////////////////////////////////////////////////
    // compare                                                                 //
    /////////////////////////////////////////////////////////////////////////////
    @test
    def compare01(): Bool = Int8.compare(-1i8, 44i8) == -1
    
    @test
    def compare02(): Bool = Int8.compare(-1i8, -44i8) == 1
    
    @test
    def compare03(): Bool = Int8.compare(88i8, 88i8) == 0
    
    /////////////////////////////////////////////////////////////////////////////
    // signum                                                                  //
    /////////////////////////////////////////////////////////////////////////////
    @test
    def signum01(): Bool = Int8.signum(-22i8) == -1
    
    @test
    def signum02(): Bool = Int8.signum(22i8) == 1
    
    @test
    def signum03(): Bool = Int8.signum(0i8) == 0
    
    /////////////////////////////////////////////////////////////////////////////
    // logicalRightShift                                                       //
    /////////////////////////////////////////////////////////////////////////////
    @test
    def logicalRightShift01(): Bool = Int8.logicalRightShift(98i8, 4) == (98i8 >>> 4)
    
    @test
    def logicalRightShift02(): Bool = Int8.logicalRightShift(127i8, 33) == (127i8 >>> 33)
    
    @test
    def logicalRightShift03(): Bool = Int8.logicalRightShift(93i8, -8) == (93i8 >>> -8)
    
    @test
    def logicalRightShift04(): Bool = Int8.logicalRightShift(93i8, 4) == (93i8 >>> 4)
    
    @test
    def logicalRightShift05(): Bool = Int8.logicalRightShift(-1i8, 1) == 127i8
    
    @test
    def logicalRightShift06(): Bool = Int8.logicalRightShift(-35i8, 4) == 13i8
    
    @test
    def logicalRightShift07(): Bool = Int8.logicalRightShift(-44i8, -2780) == 13i8
    
    @test
    def logicalRightShift08(): Bool = Int8.logicalRightShift(-98i8, 64) == -98i8
    
    @test
    def logicalRightShift09(): Bool = Int8.logicalRightShift(-27i8, 0) == -27i8
    
    @test
    def logicalRightShift10(): Bool = Int8.logicalRightShift(127i8, 1) == 63i8
    
    @test
    def logicalRightShift11(): Bool = Int8.logicalRightShift(127i8, 9) == 0i8
    
    @test
    def logicalRightShift12(): Bool = Int8.logicalRightShift(127i8, 8) == 0i8
    
    @test
    def logicalRightShift13(): Bool = Int8.logicalRightShift(-128i8, 9) == 0i8
    
    @test
    def logicalRightShift14(): Bool = Int8.logicalRightShift(-128i8, 9) == 0i8
    
    /////////////////////////////////////////////////////////////////////////////
    // bitCount                                                                //
    /////////////////////////////////////////////////////////////////////////////
    @test
    def bitCount01(): Bool = Int8.bitCount(70i8) == 3
    
    @test
    def bitCount02(): Bool = Int8.bitCount(-1i8) == 8
    
    @test
    def bitCount03(): Bool = Int8.bitCount(-99i8) == 5
    
    @test
    def bitCount04(): Bool = Int8.bitCount(0i8) == 0
    
    @test
    def bitCount05(): Bool = Int8.bitCount(127i8) == 7
    
    @test
    def bitCount06(): Bool = Int8.bitCount(-128i8) == 1
    
    /////////////////////////////////////////////////////////////////////////////
    // rotateRight                                                             //
    /////////////////////////////////////////////////////////////////////////////
    @test
    def rotateRight01(): Bool = Int8.rotateRight(0i8, 3) == 0i8
    
    @test
    def rotateRight02(): Bool = Int8.rotateRight(0i8, 19) == 0i8
    
    @test
    def rotateRight03(): Bool = Int8.rotateRight(0i8, -3) == 0i8
    
    @test
    def rotateRight04(): Bool = Int8.rotateRight(-1i8, 3) == -1i8
    
    @test
    def rotateRight05(): Bool = Int8.rotateRight(-1i8, 19) == -1i8
    
    @test
    def rotateRight06(): Bool = Int8.rotateRight(-1i8, -3) == -1i8
    
    @test
    def rotateRight07(): Bool = Int8.rotateRight(106i8, 3) == 77i8
    
    @test
    def rotateRight08(): Bool = Int8.rotateRight(106i8, 11) == 77i8
    
    @test
    def rotateRight09(): Bool = Int8.rotateRight(106i8, -5) == 77i8
    
    @test
    def rotateRight10(): Bool = Int8.rotateRight(-75i8, 7) == 107i8
    
    @test
    def rotateRight11(): Bool = Int8.rotateRight(-75i8, 23) == 107i8
    
    @test
    def rotateRight12(): Bool = Int8.rotateRight(-75i8, -1) == 107i8
    
    @test
    def rotateRight13(): Bool = Int8.rotateRight(-17i8, 6) == -65i8
    
    @test
    def rotateRight14(): Bool = Int8.rotateRight(-17i8, 22) == -65i8
    
    @test
    def rotateRight15(): Bool = Int8.rotateRight(-17i8, -10) == -65i8
    
    /////////////////////////////////////////////////////////////////////////////
    // rotateLeft                                                              //
    /////////////////////////////////////////////////////////////////////////////
    @test
    def rotateLeft01(): Bool = Int8.rotateLeft(0i8, 5) == 0i8
    
    @test
    def rotateLeft02(): Bool = Int8.rotateLeft(0i8, 13) == 0i8
    
    @test
    def rotateLeft03(): Bool = Int8.rotateLeft(0i8, -3) == 0i8
    
    @test
    def rotateLeft04(): Bool = Int8.rotateLeft(-1i8, 3) == -1i8
    
    @test
    def rotateLeft05(): Bool = Int8.rotateLeft(-1i8, 19) == -1i8
    
    @test
    def rotateLeft06(): Bool = Int8.rotateLeft(-1i8, -3) == -1i8
    
    @test
    def rotateLeft07(): Bool = Int8.rotateLeft(106i8, 5) == 77i8
    
    @test
    def rotateLeft08(): Bool = Int8.rotateLeft(106i8, 13) == 77i8
    
    @test
    def rotateLeft09(): Bool = Int8.rotateLeft(106i8, -3) == 77i8
    
    @test
    def rotateLeft10(): Bool = Int8.rotateLeft(-75i8, 1) == 107i8
    
    @test
    def rotateLeft11(): Bool = Int8.rotateLeft(-75i8, 9) == 107i8
    
    @test
    def rotateLeft12(): Bool = Int8.rotateLeft(-75i8, -7) == 107i8
    
    @test
    def rotateLeft13(): Bool = Int8.rotateLeft(-17i8, 2) == -65i8
    
    @test
    def rotateLeft14(): Bool = Int8.rotateLeft(-17i8, 10) == -65i8
    
    @test
    def rotateLeft15(): Bool = Int8.rotateLeft(-17i8, -6) == -65i8
    
    /////////////////////////////////////////////////////////////////////////////
    // reverse                                                                 //
    /////////////////////////////////////////////////////////////////////////////
    @test
    def reverse01(): Bool = Int8.reverse(58i8) == 92i8
    
    @test
    def reverse02(): Bool = Int8.reverse(92i8) == 58i8
    
    @test
    def reverse03(): Bool = Int8.reverse(-35i8) == -69i8
    
    @test
    def reverse04(): Bool = Int8.reverse(-69i8) == -35i8
    
    @test
    def reverse05(): Bool = Int8.reverse(-72i8) == 29i8
    
    @test
    def reverse06(): Bool = Int8.reverse(29i8) == -72i8
    
    @test
    def reverse07(): Bool = Int8.reverse(4i8) == 32i8
    
    @test
    def reverse08(): Bool = Int8.reverse(32i8) == 4i8
    
    @test
    def reverse09(): Bool = Int8.reverse(-1i8) == -1i8
    
    @test
    def reverse10(): Bool = Int8.reverse(0i8) == 0i8
    
    /////////////////////////////////////////////////////////////////////////////
    // highestOneBitPosition                                                   //
    /////////////////////////////////////////////////////////////////////////////
    @test
    def highestOneBitPosition01(): Bool = Int8.highestOneBitPosition(-1i8) == 7
    
    @test
    def highestOneBitPosition02(): Bool = Int8.highestOneBitPosition(-128i8) == 7
    
    @test
    def highestOneBitPosition03(): Bool = Int8.highestOneBitPosition(1i8) == 0
    
    @test
    def highestOneBitPosition04(): Bool = Int8.highestOneBitPosition(2i8) == 1
    
    @test
    def highestOneBitPosition05(): Bool = Int8.highestOneBitPosition(3i8) == 1
    
    @test
    def highestOneBitPosition06(): Bool = Int8.highestOneBitPosition(20i8) == 4
    
    @test
    def highestOneBitPosition07(): Bool = Int8.highestOneBitPosition(2i8 ** 6i8) == 6
    
    @test
    def highestOneBitPosition08(): Bool = Int8.highestOneBitPosition(127i8) == 6
    
    @test
    def highestOneBitPosition09(): Bool = Int8.highestOneBitPosition(0i8) == -1
    
    @test
    def highestOneBitPosition10(): Bool = Int8.highestOneBitPosition(2i8 ** 3i8 + 2i8 ** 5i8) == 5
    
    @test
    def highestOneBitPosition11(): Bool = Int8.highestOneBitPosition(2i8 ** 3i8 + 2i8 ** 4i8) == 4
    
    @test
    def highestOneBitPosition12(): Bool = Int8.highestOneBitPosition(-10i8) == 7
    
    /////////////////////////////////////////////////////////////////////////////
    // highestOneBit                                                           //
    /////////////////////////////////////////////////////////////////////////////
    @test
    def highestOneBit01(): Bool = Int8.highestOneBit(-1i8) == (1i8 <<< 7)
    
    @test
    def highestOneBit02(): Bool = Int8.highestOneBit(-128i8) == (1i8 <<< 7)
    
    @test
    def highestOneBit03(): Bool = Int8.highestOneBit(-77i8) == (1i8 <<< 7)
    
    @test
    def highestOneBit04(): Bool = Int8.highestOneBit(2i8) == 2i8
    
    @test
    def highestOneBit05(): Bool = Int8.highestOneBit(3i8) == 2i8
    
    @test
    def highestOneBit06(): Bool = Int8.highestOneBit(20i8) == 16i8
    
    @test
    def highestOneBit07(): Bool = Int8.highestOneBit(2i8 ** 2i8 + 2i8 ** 5i8) == 32i8
    
    @test
    def highestOneBit08(): Bool = Int8.highestOneBit(127i8) == 64i8
    
    @test
    def highestOneBit09(): Bool = Int8.highestOneBit(0i8) == 0i8
    
    @test
    def highestOneBit10(): Bool = Int8.highestOneBit(2i8 ** 5i8 + 2i8 ** 6i8) == 64i8
    
    /////////////////////////////////////////////////////////////////////////////
    // numberOfLeadingZeros                                                    //
    /////////////////////////////////////////////////////////////////////////////
    @test
    def numberOfLeadingZeros01(): Bool = Int8.numberOfLeadingZeros(0i8) == 8
    
    @test
    def numberOfLeadingZeros02(): Bool = Int8.numberOfLeadingZeros(-128i8) == 0
    
    @test
    def numberOfLeadingZeros03(): Bool = Int8.numberOfLeadingZeros(-1i8) == 0
    
    @test
    def numberOfLeadingZeros04(): Bool = Int8.numberOfLeadingZeros(127i8) == 1
    
    @test
    def numberOfLeadingZeros05(): Bool = Int8.numberOfLeadingZeros(2i8 ** 6i8) == 1
    
    @test
    def numberOfLeadingZeros06(): Bool = Int8.numberOfLeadingZeros(2i8 ** 3i8 + 2i8 ** 6i8) == 1
    
    @test
    def numberOfLeadingZeros07(): Bool = Int8.numberOfLeadingZeros(2i8 ** 4i8 + 2i8 ** 5i8) == 2
    
    @test
    def numberOfLeadingZeros08(): Bool = Int8.numberOfLeadingZeros(20i8) == 3
    
    @test
    def numberOfLeadingZeros09(): Bool = Int8.numberOfLeadingZeros(1i8) == 7
    
    /////////////////////////////////////////////////////////////////////////////
    // lowestOneBitPosition                                                    //
    /////////////////////////////////////////////////////////////////////////////
    @test
    def lowestOneBitPosition01(): Bool = Int8.lowestOneBitPosition(-1i8) == 0
    
    @test
    def lowestOneBitPosition02(): Bool = Int8.lowestOneBitPosition(-128i8) == 7
    
    @test
    def lowestOneBitPosition03(): Bool = Int8.lowestOneBitPosition(1i8) == 0
    
    @test
    def lowestOneBitPosition04(): Bool = Int8.lowestOneBitPosition(2i8) == 1
    
    @test
    def lowestOneBitPosition05(): Bool = Int8.lowestOneBitPosition(3i8) == 0
    
    @test
    def lowestOneBitPosition06(): Bool = Int8.lowestOneBitPosition(4i8) == 2
    
    @test
    def lowestOneBitPosition07(): Bool = Int8.lowestOneBitPosition(12i8) == 2
    
    @test
    def lowestOneBitPosition08(): Bool = Int8.lowestOneBitPosition(2i8 ** 4i8) == 4
    
    @test
    def lowestOneBitPosition09(): Bool = Int8.lowestOneBitPosition(2i8 ** 4i8 + 2i8 ** 6i8) == 4
    
    @test
    def lowestOneBitPosition10(): Bool = Int8.lowestOneBitPosition(127i8) == 0
    
    @test
    def lowestOneBitPosition11(): Bool = Int8.lowestOneBitPosition(0i8) == -1
    
    /////////////////////////////////////////////////////////////////////////////
    // lowestOneBit                                                            //
    /////////////////////////////////////////////////////////////////////////////
    @test
    def lowestOneBit01(): Bool = Int8.lowestOneBit(-1i8) == 1i8
    
    @test
    def lowestOneBit02(): Bool = Int8.lowestOneBit(-128i8) == (1i8 <<< 7)
    
    @test
    def lowestOneBit03(): Bool = Int8.lowestOneBit(1i8) == 1i8
    
    @test
    def lowestOneBit04(): Bool = Int8.lowestOneBit(2i8) == 2i8
    
    @test
    def lowestOneBit05(): Bool = Int8.lowestOneBit(6i8) == 2i8
    
    @test
    def lowestOneBit06(): Bool = Int8.lowestOneBit(12i8) == 4i8
    
    @test
    def lowestOneBit07(): Bool = Int8.lowestOneBit(2i8 ** 6i8) == 64i8
    
    @test
    def lowestOneBit08(): Bool = Int8.lowestOneBit(2i8 ** 5i8) == 32i8
    
    @test
    def lowestOneBit09(): Bool = Int8.lowestOneBit(2i8 ** 3i8 + 2i8 ** 5i8) == 8i8
    
    @test
    def lowestOneBit10(): Bool = Int8.lowestOneBit(127i8) == 1i8
    
    @test
    def lowestOneBit11(): Bool = Int8.lowestOneBit(0i8) == 0i8
    
    /////////////////////////////////////////////////////////////////////////////
    // numberOfTrailingZeros                                                   //
    /////////////////////////////////////////////////////////////////////////////
    @test
    def numberOfTrailingZeros01(): Bool = Int8.numberOfTrailingZeros(0i8) == 8
    
    @test
    def numberOfTrailingZeros02(): Bool = Int8.numberOfTrailingZeros(3i8) == 0
    
    @test
    def numberOfTrailingZeros03(): Bool = Int8.numberOfTrailingZeros(42i8) == 1
    
    @test
    def numberOfTrailingZeros04(): Bool = Int8.numberOfTrailingZeros(2i8 ** 4i8 + 2i8 ** 6i8) == 4
    
    @test
    def numberOfTrailingZeros05(): Bool = Int8.numberOfTrailingZeros(2i8 ** 6i8) == 6
    
    @test
    def numberOfTrailingZeros06(): Bool = Int8.numberOfTrailingZeros(-1i8) == 0
    
    @test
    def numberOfTrailingZeros07(): Bool = Int8.numberOfTrailingZeros(-128i8) == 7
    
    /////////////////////////////////////////////////////////////////////////////
    // getBit                                                                  //
    /////////////////////////////////////////////////////////////////////////////
    @test
    def getBit01(): Bool = Int8.getBit(-1i8, 5) == 1
    
    @test
    def getBit02(): Bool = Int8.getBit(-100i8, 7) == 1
    
    @test
    def getBit03(): Bool = Int8.getBit(2i8 ** 5i8, 5) == 1
    
    @test
    def getBit04(): Bool = Int8.getBit(2i8 ** 5i8, 6) == 0
    
    @test
    def getBit05(): Bool = Int8.getBit(2i8 ** 5i8, 4) == 0
    
    @test
    def getBit06(): Bool = Int8.getBit(-1i8 - 2i8 ** 4i8, 4) == 0
    
    @test
    def getBit07(): Bool = Int8.getBit(-1i8 - 2i8 ** 4i8, 5) == 1
    
    @test
    def getBit08(): Bool = Int8.getBit(0i8, 7) == 0
    
    /////////////////////////////////////////////////////////////////////////////
    // setBit                                                                  //
    /////////////////////////////////////////////////////////////////////////////
    @test
    def setBit01(): Bool = Int8.setBit(0i8, 0) == 1i8
    
    @test
    def setBit02(): Bool = Int8.setBit(0i8, 1) == 2i8
    
    @test
    def setBit03(): Bool = Int8.setBit(0i8, 7) == -128i8
    
    @test
    def setBit04(): Bool = Int8.setBit(0i8, 8) == 0i8
    
    @test
    def setBit05(): Bool = Int8.setBit(-101i8, 31) == -101i8
    
    @test
    def setBit07(): Bool = Int8.setBit(-17i8, 4) == -1i8
    
    @test
    def setBit08(): Bool = Int8.setBit(-65i8, 6) == -1i8
    
    @test
    def setBit09(): Bool = Int8.setBit(-17i8, 15) == -17i8
    
    @test
    def setBit10(): Bool = Int8.setBit(-17i8, 30) == -17i8
    
    /////////////////////////////////////////////////////////////////////////////
    // clearBit                                                                //
    /////////////////////////////////////////////////////////////////////////////
    @test
    def clearBit01(): Bool = Int8.clearBit(1i8, 0) == 0i8
    
    @test
    def clearBit02(): Bool = Int8.clearBit(1i8, 1) == 1i8
    
    @test
    def clearBit03(): Bool = Int8.clearBit(2i8, 1) == 0i8
    
    @test
    def clearBit04(): Bool = Int8.clearBit(2i8, 2) == 2i8
    
    @test
    def clearBit05(): Bool = Int8.clearBit(0i8, 31) == 0i8
    
    @test
    def clearBit06(): Bool = Int8.clearBit(0i8, 30) == 0i8
    
    @test
    def clearBit07(): Bool = Int8.clearBit(1i8 <<< 7, 7) == 0i8
    
    @test
    def clearBit08(): Bool = Int8.clearBit(109i8, 3) == 101i8
    
    @test
    def clearBit09(): Bool = Int8.clearBit(-1i8, 0) == -2i8
    
    @test
    def clearBit10(): Bool = Int8.clearBit(-1i8, 1) == -3i8
    
    @test
    def clearBit11(): Bool = Int8.clearBit(-1i8, 5) == -33i8
    
    @test
    def clearBit12(): Bool = Int8.clearBit(-1i8, 7) == ~~~(1i8 <<< 7)
    
    @test
    def clearBit13(): Bool = Int8.clearBit(-1i8, 32) == -2i8
    
    /////////////////////////////////////////////////////////////////////////////
    // flipBit                                                                 //
    /////////////////////////////////////////////////////////////////////////////
    @test
    def flipBit01(): Bool = Int8.flipBit(1i8, 0) == 0i8
    
    @test
    def flipBit02(): Bool = Int8.flipBit(1i8, 1) == 3i8
    
    @test
    def flipBit03(): Bool = Int8.flipBit(2i8, 1) == 0i8
    
    @test
    def flipBit04(): Bool = Int8.flipBit(2i8, 2) == 6i8
    
    @test
    def flipBit05(): Bool = Int8.flipBit(0i8, 7) == -128i8
    
    @test
    def flipBit06(): Bool = Int8.flipBit(0i8, 8) == 0i8
    
    @test
    def flipBit07(): Bool = Int8.flipBit(1i8 <<< 7, 7) == 0i8
    
    @test
    def flipBit08(): Bool = Int8.flipBit(-1i8, 0) == -2i8
    
    @test
    def flipBit9(): Bool = Int8.flipBit(-1i8, 1) == -3i8
    
    @test
    def flipBit10(): Bool = Int8.flipBit(-1i8, 5) == -33i8
    
    @test
    def flipBit11(): Bool = Int8.flipBit(-1i8, 5) == (-1i8-(1i8 <<< 5))
    
    @test
    def flipBit12(): Bool = Int8.flipBit(-1i8, 32) == -2i8
    
    /////////////////////////////////////////////////////////////////////////////
    // toString                                                                //
    /////////////////////////////////////////////////////////////////////////////
    @test
    def toString01(): Bool = Int8.toString(0i8) == "0"
    
    @test
    def toString02(): Bool = Int8.toString(1i8) == "1"
    
    @test
    def toString03(): Bool = Int8.toString(-1i8) == "-1"
    
    @test
    def toString04(): Bool = Int8.toString(127i8) == "127"
    
    @test
    def toString05(): Bool = Int8.toString(-128i8) == "-128"
    
    /////////////////////////////////////////////////////////////////////////////
    // fromString                                                              //
    /////////////////////////////////////////////////////////////////////////////
    @test
    def fromString01(): Bool = Int8.fromString("Bad") |> Result.isErr
    
    @test
    def fromString02(): Bool = Int8.fromString(" 1") == Ok(1i8)
    
    @test
    def fromString03(): Bool = Int8.fromString("1 ") == Ok(1i8)
    
    @test
    def fromString04(): Bool = Int8.fromString("0") == Ok(0i8)
    
    @test
    def fromString05(): Bool = Int8.fromString("1") == Ok(1i8)
    
    @test
    def fromString06(): Bool = Int8.fromString("-1") == Ok(-1i8)
    
    @test
    def fromString07(): Bool = Int8.fromString("127") == Ok(127i8)
    
    @test
    def fromString08(): Bool = Int8.fromString("-128") == Ok(-128i8)

}
