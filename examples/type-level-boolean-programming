/// A list of type `a` that uses a Boolean at the type level to track
/// whether its length is even or odd.
enum EOList[a: Type, even: Bool] {
    case Nil
    case Cons(a, EOList[a, not even])
}

/// Returns an empty list of type `a` with even length (which is 0).
def mkNil(): EOList[a, true] = EOList.Nil

/// Attaches an element to the front of the list.
def cons(x: a, l: EOList[a, e]): EOList[a, not e] =
    EOList.Cons(x, l)

/// Returns the head of the list.
def head(l: EOList[a, e]): a = match l {
    case EOList.Cons(x, _) => x
    case EOList.Nil        => bug!("Empty input not allowed")
}

/// Returns the tail of the list.
def tail(l: EOList[a, even]): EOList[a, not even] = match l {
    case EOList.Cons(_, xs) => xs
    case EOList.Nil         => bug!("Empty input not allowed")
}

/// Applies a function `f` to each element of a list.
def map(f: a -> b, l: EOList[a, even]): EOList[b, even] = match l {
    case EOList.Nil         => EOList.Nil
    case EOList.Cons(x, xs) => EOList.Cons(f(x), map(f, xs))
}

/// Returns a concatenated list containing the elements of two lists.
// def _append(l1: EOList[a, e1], l2: EOList[a, e2]): EOList[a, e1 and e2] = match l1 {
//     case EOList.Nil         => l2
//     case EOList.Cons(x, xs) => cons(x, _append(xs, l2))
// }

/// Prints both elements of a constructed list.
def _main(): Unit \ IO = {
    let list1 = cons(5, mkNil());
    let list2 = map(x: Int32 -> 2 * x, cons(10, list1));
    println(head(list2));
    println(head(tail(list2)))
}
