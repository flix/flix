plugins {
    id 'application'
    id 'scala'
}

application {
    mainClass.set('ca.uwaterloo.flix.Main')
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.scala-lang:scala-library:2.13.14!!'
    implementation 'org.scala-lang:scala-reflect:2.13.14!!'

    implementation('org.java-websocket:Java-WebSocket:1.5.6')
    implementation('org.jline:jline:3.25.1')
    implementation('org.json4s:json4s-native_2.13:4.0.7')
    implementation('org.ow2.asm:asm:9.7')
    implementation('com.github.rjeschke:txtmark:0.13')
    implementation('com.github.scopt:scopt_2.13:4.1.0')
    implementation('com.google.guava:guava:33.2.0-jre')
    implementation 'org.apache.commons:commons-lang3:3.17.0'

    implementation('io.get-coursier:coursier_2.13:2.1.4')

    // Note: The tomlj library determines the antlr library.
    // We cannot upgrade the antlr library independently.
    implementation('org.tomlj:tomlj:1.1.1')
    implementation('org.antlr:antlr4-runtime:4.11.1')

    implementation('org.slf4j:slf4j-nop:2.0.13')

    testImplementation('org.scalatest:scalatest_2.13:3.2.18')
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.forkOptions.with {
        memoryMaximumSize = '1536m'
    }
    scalaCompileOptions.additionalParameters = [
            "-Xfatal-warnings",
            "-Ypatmat-exhaust-depth", "400",
            "-release", "11",
            "-opt:inline:ca.uwaterloo.**",
            "-Xsource:3",    // Scala 3 migration flag
            "-Ytasty-reader" // Scala 3 migration flag
    ]
    compileScala.sourceCompatibility = 21
    compileScala.targetCompatibility = 21
}

sourceSets {
    main {
        scala {
            srcDirs = ['main/src']
        }

        resources {
            srcDirs = ['main/src/resources']
        }
    }
    test {
        scala {
            srcDirs = ['main/test']
        }
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'ca.uwaterloo.flix.Main'
    }

    from {
        // This line has to come before the next
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    from('main') {
        include '**/*.flix'
        include '**/*.json'
        include '**/*.zip'
        include '**/ClassList.txt'
    }

    duplicatesStrategy = 'exclude'
}

task testAll(dependsOn: ['testClasses'], type: JavaExec) {
    mainClass = 'org.scalatest.tools.Runner'
    // Note: We do not use the -P (parallelism) flag for two reasons:
    // (A) It may use excessive amounts of memory (running many instances of the compiler).
    // (B) It may garble the order of the output (when an error occurs).
    // Of course we still benefit from parallelism inside Flix itself.
    args = ['-s', 'ca.uwaterloo.flix.TestAll', '-o']
    // We also enforce that all tests can complete with 4GB of memory:
    jvmArgs = ['-Xmx3g']
    classpath = sourceSets.test.runtimeClasspath
    standardInput = System.in
}

task testApiSuite(dependsOn: ['testClasses'], type: JavaExec) {
    mainClass = 'org.scalatest.tools.Runner'
    // Note: We do not use the -P (parallelism) flag for two reasons:
    // (A) It may use excessive amounts of memory (running many instances of the compiler).
    // (B) It may garble the order of the output (when an error occurs).
    // Of course we still benefit from parallelism inside Flix itself.
    args = ['-s', 'ca.uwaterloo.flix.api.ApiSuite', '-o']
    // We also enforce that all tests can complete with 4GB of memory:
    jvmArgs = ['-Xmx3g']
    classpath = sourceSets.test.runtimeClasspath
    standardInput = System.in
}

task testBenchmarkSuite(dependsOn: ['testClasses'], type: JavaExec) {
    mainClass = 'org.scalatest.tools.Runner'
    // Note: We do not use the -P (parallelism) flag for two reasons:
    // (A) It may use excessive amounts of memory (running many instances of the compiler).
    // (B) It may garble the order of the output (when an error occurs).
    // Of course we still benefit from parallelism inside Flix itself.
    args = ['-s', 'ca.uwaterloo.flix.BenchmarkSuite', '-o']
    // We also enforce that all tests can complete with 4GB of memory:
    jvmArgs = ['-Xmx3g']
    classpath = sourceSets.test.runtimeClasspath
    standardInput = System.in
}

task testCompilerSuite(dependsOn: ['testClasses'], type: JavaExec) {
    mainClass = 'org.scalatest.tools.Runner'
    // Note: We do not use the -P (parallelism) flag for two reasons:
    // (A) It may use excessive amounts of memory (running many instances of the compiler).
    // (B) It may garble the order of the output (when an error occurs).
    // Of course we still benefit from parallelism inside Flix itself.
    args = ['-s', 'flix.CompilerSuite', '-o']
    // We also enforce that all tests can complete with 4GB of memory:
    jvmArgs = ['-Xmx3g']
    classpath = sourceSets.test.runtimeClasspath
    standardInput = System.in
}

task testFuzzerSuite(dependsOn: ['testClasses'], type: JavaExec) {
    mainClass = 'org.scalatest.tools.Runner'
    // Note: We do not use the -P (parallelism) flag for two reasons:
    // (A) It may use excessive amounts of memory (running many instances of the compiler).
    // (B) It may garble the order of the output (when an error occurs).
    // Of course we still benefit from parallelism inside Flix itself.
    args = ['-s', 'flix.fuzzers.FuzzerSuite', '-o']
    // We also enforce that all tests can complete with 4GB of memory:
    jvmArgs = ['-Xmx3g']
    classpath = sourceSets.test.runtimeClasspath
    standardInput = System.in
}

task testExampleSuite(dependsOn: ['testClasses'], type: JavaExec) {
    mainClass = 'org.scalatest.tools.Runner'
    // Note: We do not use the -P (parallelism) flag for two reasons:
    // (A) It may use excessive amounts of memory (running many instances of the compiler).
    // (B) It may garble the order of the output (when an error occurs).
    // Of course we still benefit from parallelism inside Flix itself.
    args = ['-s', 'ca.uwaterloo.flix.ExampleSuite', '-o']
    // We also enforce that all tests can complete with 4GB of memory:
    jvmArgs = ['-Xmx3g']
    classpath = sourceSets.test.runtimeClasspath
    standardInput = System.in
}

task testExperimentalSuite(dependsOn: ['testClasses'], type: JavaExec) {
    mainClass = 'org.scalatest.tools.Runner'
    // Note: We do not use the -P (parallelism) flag for two reasons:
    // (A) It may use excessive amounts of memory (running many instances of the compiler).
    // (B) It may garble the order of the output (when an error occurs).
    // Of course we still benefit from parallelism inside Flix itself.
    args = ['-s', 'flix.experimental.ExperimentalSuite', '-o']
    // We also enforce that all tests can complete with 4GB of memory:
    jvmArgs = ['-Xmx3g']
    classpath = sourceSets.test.runtimeClasspath
    standardInput = System.in
}

task testLanguageSuite(dependsOn: ['testClasses'], type: JavaExec) {
    mainClass = 'org.scalatest.tools.Runner'
    // Note: We do not use the -P (parallelism) flag for two reasons:
    // (A) It may use excessive amounts of memory (running many instances of the compiler).
    // (B) It may garble the order of the output (when an error occurs).
    // Of course we still benefit from parallelism inside Flix itself.
    args = ['-s', 'ca.uwaterloo.flix.language.LanguageSuite', '-o']
    // We also enforce that all tests can complete with 4GB of memory:
    jvmArgs = ['-Xmx3g']
    classpath = sourceSets.test.runtimeClasspath
    standardInput = System.in
}

task testLibrarySuite(dependsOn: ['testClasses'], type: JavaExec) {
    mainClass = 'org.scalatest.tools.Runner'
    // Note: We do not use the -P (parallelism) flag for two reasons:
    // (A) It may use excessive amounts of memory (running many instances of the compiler).
    // (B) It may garble the order of the output (when an error occurs).
    // Of course we still benefit from parallelism inside Flix itself.
    args = ['-s', 'ca.uwaterloo.flix.library.LibrarySuite', '-o']
    // We also enforce that all tests can complete with 4GB of memory:
    jvmArgs = ['-Xmx3g']
    classpath = sourceSets.test.runtimeClasspath
    standardInput = System.in
}

task testMain(dependsOn: ['testClasses'], type: JavaExec) {
    mainClass = 'org.scalatest.tools.Runner'
    // Note: We do not use the -P (parallelism) flag for two reasons:
    // (A) It may use excessive amounts of memory (running many instances of the compiler).
    // (B) It may garble the order of the output (when an error occurs).
    // Of course we still benefit from parallelism inside Flix itself.
    args = ['-s', 'ca.uwaterloo.flix.TestMain', '-o']
    // We also enforce that all tests can complete with 4GB of memory:
    jvmArgs = ['-Xmx3g']
    classpath = sourceSets.test.runtimeClasspath
    standardInput = System.in
}

task testToolsSuite(dependsOn: ['testClasses'], type: JavaExec) {
    mainClass = 'org.scalatest.tools.Runner'
    // Note: We do not use the -P (parallelism) flag for two reasons:
    // (A) It may use excessive amounts of memory (running many instances of the compiler).
    // (B) It may garble the order of the output (when an error occurs).
    // Of course we still benefit from parallelism inside Flix itself.
    args = ['-s', 'ca.uwaterloo.flix.tools.ToolsSuite', '-o']
    // We also enforce that all tests can complete with 4GB of memory:
    jvmArgs = ['-Xmx3g']
    classpath = sourceSets.test.runtimeClasspath
    standardInput = System.in
}

task testUtilSuite(dependsOn: ['testClasses'], type: JavaExec) {
    mainClass = 'org.scalatest.tools.Runner'
    // Note: We do not use the -P (parallelism) flag for two reasons:
    // (A) It may use excessive amounts of memory (running many instances of the compiler).
    // (B) It may garble the order of the output (when an error occurs).
    // Of course we still benefit from parallelism inside Flix itself.
    args = ['-s', 'ca.uwaterloo.flix.util.UtilSuite', '-o']
    // We also enforce that all tests can complete with 4GB of memory:
    jvmArgs = ['-Xmx3g']
    classpath = sourceSets.test.runtimeClasspath
    standardInput = System.in
}

test.dependsOn testAll

task vscode(type: Copy, dependsOn: [clean, jar]) {
    from 'build/libs/flix.jar'
    into providers.gradleProperty('dev.flix.vscode.project')
}
