/// A list that tracks whether its length is even or odd.
enum EOList[a: Type, even: Bool] {
    case EONil
    case EOCons(a, EOList[a, not even])
}

/// Returns an empty and even list.
def mkNilEO(): EOList[a, true] = EOList.EONil

/// Attaches an element to the front of the list.
def consEO(x: a, list: EOList[a, even]): EOList[a, not even] =
    EOList.EOCons(x, list)

/// Returns the head of the list.
def headEO(list: EOList[a, even]): a = match list {
    case EOList.EOCons(x, _) => x
    case EOList.EONil        => bug!("Empty input not allowed")
}

/// Returns the tail of the list.
def tailEO(list: EOList[a, even]): EOList[a, not even] = match list {
    case EOList.EOCons(_, smallerList) => smallerList
    case EOList.EONil                  => bug!("Empty input not allowed")
}

/// Applies a function `f` to each element of a list.
def mapEO(f: a -> b, list: EOList[a, even]): EOList[b, even] = match list {
    case EOList.EONil            => EOList.EONil
    case EOList.EOCons(x, sList) => EOList.EOCons(f(x), mapEO(f, sList))
}

/// Prints both elements of a constructed list.
def main(): Unit \ IO = {
    let list1 = consEO(5, mkNilEO());
    let list2 = mapEO(x -> 2 * x, consEO(10, list1));
    println(headEO(list2));
    println(headEO(tailEO(list2)))
}
