plugins {
    id 'application'
    id 'scala'
}

application {
    mainClass.set('ca.uwaterloo.flix.Main')
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.scala-lang:scala-library:2.13.5!!'
    implementation 'org.scala-lang:scala-reflect:2.13.5!!'

    implementation('org.java-websocket:Java-WebSocket:1.5.3')
    implementation('org.jline:jline:3.5.1')
    implementation('org.json4s:json4s-native_2.13:3.5.5')
    implementation('org.ow2.asm:asm:9.2')
    implementation('org.parboiled:parboiled_2.13:2.4.1')
    implementation('org.scalactic:scalactic_2.13:3.2.15')
    implementation("org.scala-lang.modules:scala-parallel-collections_2.13:0.2.0")
    implementation('com.github.scopt:scopt_2.13:4.0.1')
    implementation('com.google.guava:guava:31.1-jre')

    // implementation("io.github.p-org.solvers:pjbdd:1.0.10-10-v5")
    implementation files('lib/pjbdd-v1.0.10-9-67-gf113b5a.jar')

    implementation('io.get-coursier:coursier_2.13:2.1.0-RC4')
    implementation('org.tomlj:tomlj:1.1.0')
    implementation('org.antlr:antlr4-runtime:4.11.1')

    testImplementation('org.scalatest:scalatest_2.13:3.2.15')
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.forkOptions.with {
        memoryMaximumSize = '1536m'
    }
    scalaCompileOptions.additionalParameters = [
            "-language:postfixOps",
            "-Xfatal-warnings",
            "-Ypatmat-exhaust-depth", "400"
    ]
    compileScala.sourceCompatibility = 11
    compileScala.targetCompatibility = 11
}

sourceSets {
    main {
        scala {
            srcDirs = ['main/src']
        }
    }
    test {
        scala {
            srcDirs = ['main/test']
        }
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'ca.uwaterloo.flix.Main'
    }

    from {
        // This line has to come before the next
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    
    from('main') {
        include '**/*.flix'
        include '**/*.zip'
    }

    duplicatesStrategy = 'exclude'
}

task testAll(dependsOn: ['testClasses'], type: JavaExec) {
    mainClass = 'org.scalatest.tools.Runner'
    args = ['-s', 'ca.uwaterloo.flix.TestAll', '-o']
    classpath = sourceSets.test.runtimeClasspath
    standardInput = System.in
}

test.dependsOn testAll

